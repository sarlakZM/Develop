class Node {
  constructor(data) {
    this.data = data;
    this.left = null;
    this.right = null;

  }

  insert (data){
    if(data < this.data && this.left){
      this.left.insert(data)
    }else if (data < this.data){
      this.left = new Node(data);
    }else if (data > this.data && this.right) {
      this.right.insert(data);
    }else if (data > this.data) {
      this.right = new Node(data)
    }
  }

  contains (data) {
    if (data === this.data) {
      return this;
    }

    if (data > this.data && this.right) {
      return this.right.contains(data);
    }else if (data < this.data && this.left) {
      return this.left.contains(data)
    }

    return null;
  }

  validate(node, min = null, max = null) {
    console.log(node.data,min,max)
    if(max != null && node.data > max){
      return false;
    }
    if(min != null && node.data < min){
      return false;
    }

    if(node.left && !this.validate(node.left, min, node.data)){
      return false;
    }
    if(node.right &&!this.validate(node.right, node.data, max)){
      return false;
    }

    return true;
  }
}

const btree = new Node(2);
btree.insert(1)
btree.insert(3)
btree.insert(12)
console.log(btree)
console.log(btree.contains(3))
console.log(btree.validate(btree))
