class Node {
  constructor(data, next = null){
    this.data = data;
    this.next = next;
  }
}

class LinkedList {
  constructor(){
    this.head = null
  }

  insertFirst(data){
    // this.head = new Node(data, this.head);
    this.insertAt(data, 0)
  }

  insertLast(data){
    // let last = this.getLast();
    // if(last){
    //   //There are some existing nodes in our chain
    //   last.next = new Node(data);
    // }else{
    //   // The chain is empty
    //   this.head = new Node(data)
    // }

    this.insertAt(data, this.size() - 1);
  }

  size(){
    let counter = 0;
    let node = this.head;
    while(node){
      counter++;
      node = node.next;
    }
    
    return counter;
  }

  getFirst() {
    // return this.head;
    return this.getAt(0);
  }

  getLast() {
    // if (!this.head){
    //   return null;
    // }

    // let node = this.head;
    // while (node){
    //   if (!node.next){
    //     return node;
    //   }
    //   node = node.next;
    // }
    return this.getAt(this.size() - 1);
  }

  clear() {
    this.head = null;
  }

  removeFirst() {
    // if (!this.head){
    //   return;
    // }
    // this.head = this.head.next;
    this.removeAt(0);
  }

  removeLast() {
    // if (!this.head){
    //   return;
    // }

    // if (!this.head.next){
    //   this.head = null;
    //   return;
    // }

    // let previous = this.head;
    // let node = this.head.next;
    // while(node.next){
    //   previous = node;
    //   node = node.next;
    // }

    // previous.next = null
    this.removeAt(this.size() - 1)
  }

  getAt(index) {
    if(!this.head){
      return;
    }
    let counter = 0;
    let node = this.head;
    while (node) {
      if (index === counter) {
          return node;
      }
      counter++;
      node = node.next;
    }
    return null;
  }

  removeAt(index) {
    if (!this.head) {
      return;
    }

    if(index === 0){
      this.head = this.head.next;
      return;
    }

    let previous = this.getAt(index - 1);
    if (!previous || !previous.next){
      return;
    }
    previous.next = previous.next.next;
  }

  insertAt(data, index) {
    if (!this.head){
      this.head = new Node(data)
      return;
    }

    if (index === 0) {
      this.head = new Node(data, this.head)
      return;
    }

    let previous = this.getAt(index - 1) || this.getLast();
    let node = new Node(data, previous.next);
    previous.next = node;
    return;
  }
 
  forEach (fn) {
    let node = this.head;
    let counter = 0;
    while(node){
      fn(node, counter);
      node = node.next;
      counter++;
    }
  }

  //generator iterator  https://babeljs.io/docs/en/learn
  *[Symbol.iterator] () {
    let node = this.head;
    while(node){
      yield node;
      node = node.next;
    }
  }
}

const node = new Node("sarlak");
const list = new LinkedList();
list.insertFirst("zahra")
console.log(list)
list.head = node;
list.insertFirst("zahra")
console.log(list)

console.log(list.size())
console.log(list.getFirst())
console.log(list.getLast())
list.clear();
console.log(list.size());

list.removeFirst();
list.removeLast();

console.log("insert")
list.insertFirst(1);
list.removeFirst();

list.insertFirst(1);
list.removeLast();

list.insertFirst(4);
list.insertFirst(3)
list.insertFirst(2)
list.insertFirst(1)
list.removeFirst();
list.removeLast();

list.insertFirst(1)
list.insertLast(4)
console.log(list)

console.log(list.getAt(3))
list.removeAt(0)
console.log(list)

list.insertAt("12", 2)
console.log(list)


console.log("=====forEach====", list.size())
list.forEach((node, index) => {
  console.log(node.data, index)
})

console.log("=====let of======", list.size())
for (let node of list){
  console.log(node.data)
}
